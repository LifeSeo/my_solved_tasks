print('Задача 1. Я стал новым пиратом!')

# Старому капитану нужно пополнить команду, но на корабль попадут
# только достойные! Он отобрал десять человек. Те, кто крикнет
# слово «Карамба», попадут на борт.

# Что нужно сделать

# Пользователь вводит десять слов. Напишите программу,
# которая определяет, сколько из них совпадают со словом «Карамба».

def caramba():
    lst = []
    for i in range(10):
        word = input(f"Введите {i+1} слово: ")
        while word == "":
            word = input(f"Не может быть пустое значение. Введите {i+1} слово: ")
        lst.append(word)
    print("Все слова:", *lst)

    counter = 0
    for j in lst:
        j = j.lower()
        if j == "карамба":
            counter +=1
    print("Капитан возьмет на борт:", counter, "человек(а)")

caramba()

print('Задача 2. Кривой мессенджер')

# Существует мессенджер, в котором иногда возникают неполадки при
# передаче сообщений: в них попадает лишний символ — звёздочка.
# Пользователям это надоело, поэтому они стали уходить в другие сервисы.
# Но один из них заинтересовался, на каких позициях обычно появляется звёздочка.
# Чтобы выяснить это, пользователю необходимо подготовить строки, в которых
# символ «*» встречается ровно один раз. 

# Что нужно сделать:

# Напишите программу, которая определяет порядковый номер звёздочки в строке.

# Пример:

# Введите текст: «Пр*ивет как дела».
# Символ «*» стоит на позиции 3.

word_with_symbol = input("Введите число со знаком «*»: ")

def find_symbol(word_with_symbol):
    counter = 1
    result = str()
    for i in word_with_symbol:
        if i != "*":
            counter +=1
            result = "Символ «*» отсутствует"
        else:
            result = f"Символ «*» стоит на {counter} месте"
            break
    return result        
                     
res = find_symbol(word_with_symbol)
print(res)

print('Задача 3. Театр')

# В городе планируют построить театр под открытым небом, но для начала нужно оценить,
# сколько сделать рядов, сидений в них и каким должно быть расстояние между рядами.

# Что нужно сделать

# Напишите программу, которая получает на вход количество рядов, сидений и
# свободных метров между рядами, а затем выводит примерный макет театра на экран.


# Сцена
# Введите кол-во рядов: 5
# Введите кол-во сидений ряду: 7
# Введите кол-во метров между рядами: 3
#
# ======= *** =======
# ======= *** =======
# ======= *** =======
# ======= *** =======
# ======= *** =======

row = int(input("Введите кол-во рядов: "))
seats = int(input("Введите кол-во сидений ряду: "))
metros = int(input("Введите кол-во метров между рядами: "))

while row <= 0 or seats <= 0 or metros < 0:
    print("Значение должно быть положительные и больше нуля, введите заного")
    row = int(input("Кол-во рядов больше нуля: "))
    seats = int(input("Кол-во сидений ряду больше нуля: "))
    metros = int(input("Кол-во метров между рядами больше или равно нулю: "))

for i in range(row):
    print("="*seats, "*"*metros, "="*seats, end="\n")
    
print('Задача 4. Марсоход 2')

# К роботу Валли отправили «коллегу» Билли. Это его первая высадка на Марс,
# поэтому его тестируют в прямоугольном помещении размером 15 × 20 м.
# Марсоход высаживается в центре комнаты (в точке 8, 10), затем управление
# им передаётся оператору, то есть пользователю вашей программы. 

# Программа спрашивает, в какую сторону оператор хочет направить робота:
# север (клавиша W), юг (клавиша S), запад (клавиша A) или восток (клавиша D).
# Оператор делает выбор, марсоход перемещается в эту сторону на один метр,
# а программа сообщает новую позицию робота. Если марсоход упёрся в стену,
# он не должен пытаться переместиться в сторону стены — в этом случае его
# позиция не меняется. 

# Что нужно сделать
# Создайте программу для управления роботом Билли.

# Пример:
# 
# [Программа]: Марсоход находится на позиции 6, 19, введите команду:
# [Оператор]: A
# [Программа]: Марсоход находится на позиции 5, 19, введите команду:
# [Оператор]: W
# [Программа]: Марсоход находится на позиции 5, 20, введите команду:
# [Оператор]: W
# [Программа]: Марсоход находится на позиции 5, 20, введите команду:

command = input("Введите команду для робота - север (клавиша W)," 
                "юг (клавиша S), запад (клавиша A) или восток (клавиша D): ")
command = command.lower()
print(command)
coorditan_a = 15
coorditan_b = 20
position_a = 8
position_b = 10
end = 1

while command != "w" and command != "s" and command != "a" and command != "d":
    command = input("Такой команды нет, введите заного - север (клавиша W)," 
                "юг (клавиша S), запад (клавиша A) или восток (клавиша D): ")
command = command.lower()

position_a = 8
position_b = 18

while end == 1:
    
    if command == "w" and position_a != 0 and position_b <= coorditan_b -1:
        position_b +=1
    elif command == "s" and position_a != 0 and position_b != 0:
        position_b -=1
    elif command == "a" and position_a != 0 and position_a <= coorditan_a -1:
        position_a -=1
    elif command == "d" and position_a != 0 and position_b != 0:
        position_a +=1
    print(f"Новые координаты: {position_a}, {position_b}")
    end = int(input("Если хотите продолжить, нажмите - 1, остановить - 0: "))
    if end == 0:
        print("Вы закончили работу с программой")
        break
    elif end == 1:
        command = input("Введите заного - север (клавиша W)," 
                    "юг (клавиша S), запад (клавиша A) или восток (клавиша D):") 
        command = command.lower()
    else:
        print("Неверное значение, работа программы приостановлена")
        
print('Задача 5. Великий и могучий')

# Паоло изучает русский язык: занимается по учебникам, читает книги, слушает музыку.
# Ему особенно понравилась книга «Преступление и наказание». Паоло решил найти самое
# длинное слово в этой книге, чтобы сравнить его с аналогом на своём языке.

# Что нужно сделать

# Напишите программу, которая получает на вход текст и находит длину самого
# длинного слова в нём. Слова в тексте разделяются одним пробелом.

# Пример:

# Введите текст: Меня зовут Пётр.
# Самое длинное слово, букв: 5.

# Введите текст: Меня зовут Василий
# Самое длинное слово, 7 букв

text = input("Введите текс, слова разделите одним пробелом: ")

def letters_counter(text):
    counter = 0
    max = 0
    for i in text:
        if i != " ":
            counter +=1
            if counter > max:
                max = counter
        else:
            counter = 0
    return max
        
max_letters = letters_counter(text)
print("Максимальное число букв =", max_letters)

print('Задача 6. Коровы')

# Для коров есть 10 стойл. В каждом из них условия для животных разные,
# поэтому и молока они дают по-разному. В первом стойле производят 2 литра в день,
# во втором — 4, в третьем — 6, далее — 8, 10, 12, 14, 16, 18 и 20.
# При этом коровы находятся не во всех стойлах. Свободные и занятые
# обозначаются строкой из букв a и b, где a — свободное стойло, b — занятое.

# Что нужно сделать

# Напишите программу для подсчёта получаемого молока в коровнике.
# Важно учитывать следующее взаимодействие: пользователь вводит строку
# из десяти символов a и b. Необходимо определить, сколько в итоге будет
# произведено молока за день.

symbols = input("Введите строку из десять символов «а» и «b»: ")

while len(symbols) < 10:
    symbols = input("В сроке НЕ 10 символов. Введите строку из 10-nb символов «а» и «b»: ")

def check_rules(symbols):   
    for i in symbols:
        if i == "a" or i == "b":
            rules ="Введено верно, продолжаем"
        else:
            rules ="Неверное значение. Работа программы прекращена"
    return rules

def milk_litros(symbols):
    start = 2
    summa_milk = 0
    counter = 1
    for i in symbols:
        if i == "a":
            summa_milk += start * counter
            counter += 1
        else:
            counter += 1
    return summa_milk

rules = check_rules(symbols)
print(rules)
litros_for_1_day = milk_litros(symbols)
print("При таком рассположении, коровы дадут:", litros_for_1_day, "молока")


print('Задача 7. Метод бутерброда')

# В секретном агентстве Super-Secret-no решили использовать
# «метод бутерброда» для шифрования переписки своих сотрудников.
# Сначала буквы слова нумеруются в таком порядке: первая буква получает номер 1,
# последняя буква — номер 2, вторая — номер 3, предпоследняя — номер 4,
# потом третья… и так для всех букв (см. рисунок). Затем все буквы записываются
# в шифр в порядке своих номеров.

# Например, слово «sandwich» зашифруется в «shacnidw».
# К сожалению, программист «Super-Secret-no», написал только программу шифрования
# и уволился.
# И теперь агенты не могут понять, что же они написали друг другу. Помогите им.

# Пример:
# Введите зашифрованное сообщение: shacnidw
# Расшифрованное сообщение: sandwich
#          1   3   5   7   8   6   4   2
# Слово: | s | a | n | d | w | i | c | h |
# Шифр:  | s | h | a | c | n | i | d | w |

word = input("Введите защифрованное слово: ")
summa_1 = ""
summa_2 = ""
counter = 1
if len(word) % 2 == 0:
  for i in word:
    if counter % 2 != 0:
      summa_1 += i
      counter += 1
    elif counter % 2 == 0:
      counter += 1


if len(word) % 2 == 0:
  string_length=len(word)
  sliced=word[string_length::-1]
  for j in sliced:
    if counter % 2 != 0:
      summa_2 += j
      counter += 1
    elif counter % 2 == 0:
      counter += 1


print("Зашифрованное слово:", summa_1 + summa_2)

if len(word) % 2 != 0:
    print("Нет решения, в условии не указано, куда вставить не парную букву")
    
print('Задача 8. Древний палиндром')

# Контекст:
# Вы молодой археолог, который исследует древний свиток с таинственным посланием.
# Согласно легенде, если вы сможете прочитать палиндром из этого послания,
# то раскроете его секреты.
# Однако свиток весьма постарел, и некоторые буквы стерлись.
# Вам нужно разработать программу, которая поможет определить,
# является ли фрагмент послания, введенный пользователем, палиндромом.
# Если ваша программа сможет справиться с заданием, то вы сможете
# приблизиться к разгадке древней тайны.
#
# Задача: 
# Напишите программу, которая поможет определить, является ли введенная строка
# палиндромом.
# Если введенная строка является палиндромом, выведите сообщение "Да, это палиндром!".
# В противном случае выведите сообщение "Нет, это не палиндром!".
#
# Советы:
# -- Для выполнения задачи используйте цикл for и итерацию по символам строки.
# -- Возможно вам понадобиться развернуть строку, чтобы это сделать вам
# достаточно уметь проходить по строке циклом и использовать конкатенацию. 
# -- Чтобы сложить символы строки в обратном порядке - подумайте над переменой
# мест слагаемых. Будут ли результаты одинаковы если мы все символы будем добавлять
# в конец строки (строка = строка + символ) и если мы будем их добавлять в начало
# строки (строка = символ + строка)?

word = input("Введите слово: ")
# делаю через срезы
len_word = len(word)
word_reverse = word[len_word::-1]
print(f"Сравниваем слово {word} и {word_reverse}")

def string_comparison(word, word_reverse):
    if word == word_reverse:
        print(f"Слово {word} является палиндромом")
    else:
        print(f"Слово {word} НЕ является палиндромом")
        
string_comparison(word, word_reverse)