print('Задача 1. Кубы чисел')

# В один из вечеров к Васе домой пришёл племянник и пожаловался на
# сложности с уроками математики: у него никак не получалось разобраться со
# степенями чисел. Вася решил помочь племяннику и написать программу,
# которая позволит наглядно увидеть возведение чисел в третью степень.

# Напишите программу, которая возводит в третью степень каждое число
# от 1 до N и выводит результат на экран.

number = int(input("Какое число возводим в степень: "))

def exponentiation(number):
    counter = 1
    while counter <= number:
        summa = counter**3
        print(f"{counter} в 3-й степени = {summa}")
        counter += 1
        
exponentiation(number)

print('Задача 2. Коллекторы')

# Напишите робота для коллекторов.
# В самом начале он спрашивает имя должника и сумму долга,
# а затем начинает требовать у него погашения до тех пор, 
# пока он не введёт нужную сумму (равную сумме долга или больше).
# После погашения долга сообщите об этом пользователю и поблагодарите его.
 
# Пример:
# Василий, ваша задолженность составляет 100 рублей.
# Сколько рублей вы внесёте прямо сейчас, чтобы её погасить? 50
 
# Маловато, Василий. Давайте ещё раз.
# Сколько рублей вы внесёте прямо сейчас, чтобы её погасить? 90
# Маловато, Василий. Давайте ещё раз.
 
# Сколько рублей вы внесёте прямо сейчас, чтобы её погасить? 110
# Отлично, Василий! Вы погасили долг. Спасибо!

dept_name = input("Введие имя должника: ")
dept_amount = int(input("Введите сумму долга: "))

def dept_check(dept_name, dept_amount):
    print(f"{dept_name}, ваша задолженность составляет: {dept_amount}")
    want_to_pay = int(input("Какую сумму хотите погасить: "))
    while want_to_pay < dept_amount:
        print(f"Маловато, {dept_name}. Давайте ещё раз.")
        want_to_pay = int(input("Какую сумму хотите погасить: "))
    print(f"Отлично, {dept_name}! Вы погасили долг. Спасибо!")
    
dept_check(dept_name, dept_amount)

print('Задача 3. Слишком большие числа')

# У неудачливого бухгалтера всё опять идёт наперекосяк: ему приносят
# такие большие счета, что числа не помещаются на бумаге. 

# Напишите программу, которая считала бы для него, сколько цифр во
# вводимом числе. Обратите внимание, что число 0 имеет одну цифру.

# Пример:
# Введите число: 567
# Ответ: 3

# Введите число: 1203
# Ответ: 4

number = int(input("Введите число: "))

def number_count(number):
    counter = 0
    while number != 0:
        number = number // 10
        counter += 1
    print(f"В этот числе {counter} знаков(а)")

number_count(number)

print('Задача 4. Поставьте оценку!')

# Вася выложил своё новое приложение на платформу для начинающих разработчиков,
# на ней пользователи могут ставить оценку приложению от −100 до 100.
# Ему захотелось сравнить количество положительных и отрицательных отзывов,
# для этого он заранее отфильтровал все отзывы так,
# чтобы в конце были те, которые равны нулю.
 
# Напишите программу,
# которая находит количество положительных
# и количество отрицательных чисел в последовательности.
# Последовательность заканчивается на числе 0.
 
# Пример:
# Введите число: −4
# Введите число: −90
# Введите число: 6
# Введите число: 0
# Кол-во положительных чисел: 1
# Кол-во отрицательных чисел: 2

count = int(input("Введите количество отзывов: "))
lst = []

for i in range(0, count):
    marks = int(input(f"Введите {i+1} отзыв, число от -100 до 100: "))
    lst.append(marks)
print("Выводим все отзывы", lst)

good_marks = 0
bad_marks = 0
no_marks = 0   # ноль будем считать, что юзер воздержался
for j in lst:
    if j < 100 and j > 0: good_marks += 1
    elif j == 0: no_marks += 1
    elif j < 0: bad_marks += 1
print(f"Положительных отзывов: {good_marks} , Отрицательных отзывов: {bad_marks}, Воздержалось: {no_marks}")

print('Задача 5. Обычный день на работе')

# Максим программирует целый день на работе и вечером идёт домой.
# Каждый час начальство кидает ему несколько задач,
# которые нужно решить до следующего рабочего часа.
# И вдобавок каждый час Максиму звонит супруга.
# Он знает, что если он возьмёт трубку, то жена попросит зайти вечером в магазин.
 
# Напишите программу,
# в которой считается, сколько задач выполнил Максим за день (8 часов).
# Если он хоть раз взял трубку,
# то в конце дополнительно выводите сообщение: «Нужно зайти в магазин».
 
# Пример:
# Начался 8-часовой рабочий день
# 1 час
# Сколько задач решит Максим? 1
# Звонит жена. Взять трубку? (1-да, 0-нет) 0
 
# 2 час
# Сколько задач решит Максим? 2
# Звонит жена. Взять трубку? (1-да, 0-нет) 0
 
# 3 час
# Сколько задач решит Максим? 3
# Звонит жена. Взять трубку? (1-да, 0-нет) 0
 
# 4 час
# Сколько задач решит Максим? 4
# Звонит жена. Взять трубку? (1-да, 0-нет) 1
 
# 5 час
# Сколько задач решит Максим? 5
# Звонит жена. Взять трубку? (1-да, 0-нет) 0
 
# 6 час
# Сколько задач решит Максим? 1
# Звонит жена. Взять трубку? (1-да, 0-нет) 0
 
# 7 час
# Сколько задач решит Максим? 2
# Звонит жена. Взять трубку? (1-да, 0-нет) 1
 
# 8 час
# Сколько задач решит Максим? 3
# Звонит жена. Взять трубку? (1-да, 0-нет) 0
 
# Рабочий день закончился. Всего выполнено задач: 21
# Нужно зайти в магазин

print("Начался 8-часовой рабочий день")

hours = 8
tasks = 0
calls = 0

while hours > 0:
    # будем считать, что Максим в час решает 1 задачу
    # можно было сделать через input и сумировать задачи каждый раз   
    print("Сколько задач решил Максим?", tasks)
    wife_call = int(input("Звонит жена. Взять трубку? (1-да, 0-нет): "))
    tasks += 1
    hours -= 1
    calls += wife_call
    if calls > 0:
        shop = str("Нужно зайти в магазин!")
    else:
        shop = str("Не нужно в магазин!")
  
print("Рабочий день закончился. Всего выполнено задач:", tasks)
print(shop)  

print('Задача 6. Вклады')

# Вклад в банке составляет X рублей.
# Ежегодно он увеличивается на P процентов,
# после чего дробная часть копеек отбрасывается.

# Определите, через сколько лет вклад составит не менее Y рублей.

# Напишите программу,
# которая по данным числам X, Y, P определяет,
# сколько лет пройдёт, прежде чем сумма достигнет значения Y.

x = int(input("Введите сумму вклада: "))
y = int(input("Введите ежегодный процент: "))
p = int(input("Сколько должно быть на счету: "))

def wanted_money(x, y, p):
    result = x
    years = 1
    while result < p:
        result += result*10 / 100
        # делаем просчет "сложного" процента, а не от начального депозита
        # round для округления не используем, так как значение int, а не float
        years += 1
    return years
    
all_years = wanted_money(x, y, p)
print(f"Должно пройти: {all_years} лет(года)")

print('Задача 7. Игра «Угадай число»')

# В одной из практических работ мы делали задачу, где папа-программист
# написал для сына программу, которая просит его угадать число.
# Недостаток программы был в том, что бедному сыну приходилось её каждый раз
# перезапускать, чтобы угадывать число. Теперь, когда мы знаем гораздо больше,
# пришло время исправить этот недостаток и заодно немного улучшить саму игру.

# Напишите программу-игру, которая запрашивает у пользователя число до тех пор,
# пока он его не отгадает. Выводите сообщения в соответствии с примером.

# Пример (загадали число 7)
# Введите число: 3
# Число меньше, чем нужно. Попробуйте ещё раз!
# Введите число: 10
# Число больше, чем нужно. Попробуйте ещё раз!
# Введите число: 8
# Число больше, чем нужно. Попробуйте ещё раз!
# Введите число: 7
# Вы угадали! Число попыток: 4

number = int(input("Загадайте число: "))


def guess_the_number(number):
    your_number = int(input("Угадайте число: "))
    counter = 1
    while number != your_number:
        counter+= 1
        if your_number < number:
            print("Загаданное число больше")
            your_number = int(input("Попробуйте еще раз. Угадайте число: "))
        elif your_number > number:
            print("Загаданное число меньше")
            your_number = int(input("Попробуйте еще раз. Угадайте число: "))
            
    print(f"Вы угадали c {counter} попытки, это число {number}")
        
guess_the_number(number)

print('Задача 8. Игра «Компьютер угадывает число»')

# Поменяйте мальчика и компьютер из прошлой задачи местами.
# Теперь мальчик загадывает число между 1 и 100 (включительно).
# Компьютер может спросить у мальчика:
# «Твое число равно, меньше или больше, чем число N?»,
# где N — число, которое хочет проверить компьютер.
# Мальчик отвечает одним из трёх чисел:
# 1 — равно,
# 2 — больше,
# 3 — меньше.
 
# Напишите программу, 
# которая с помощью цепочки таких вопросов и ответов мальчика угадывает число.
 
# Дополнительно: сделайте так, чтобы можно было гарантированно угадать число за семь
# попыток.

# Подсказка: При желании найдите описание алгоритма бинарного поиска и попробуйте
# применить в этой задаче.
#Разбор подобного решения будет в следующем модуле.


number = int(input("Загадайте число от 1 до 100(для честности): "))
counter = 1
min = 1
max = 100

while True:
    middle = (max + min) // 2
    print(f"Число 1 - равно, 2 - больше или 3 - меньше {middle}?")
    guess_num = int(input("Мальчик вводит ответ: "))
    counter += 1
    if guess_num == 2:
        min = middle
    elif guess_num == 3:
        max = middle
    elif guess_num == 1:
        print(f"Компьютер выиграл за {counter} попыток ")
        break